/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package interfaces.cobros;
import gym.*;
import interfaces.inscripciones.InscripcionKick;
import java.sql.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jesus
 */
public class CobrarKick extends javax.swing.JInternalFrame {
    private double cantidad;
    private long dias;
    private String id;
    /**
     * Creates new form CobrarKick
     */
    public CobrarKick() {
        initComponents();
        calendarVigencia.getDateEditor().setEnabled(false);
        labelCarga.setVisible(false);
        btnRealizarCobro.setEnabled(false);
        mostrarDatosTabla();
        Calendar calendar = Calendar.getInstance(); // Obtiene la instancia del calendario con la fecha y hora actual
        calendar.add(Calendar.DAY_OF_MONTH, 1); // Suma un día a la fecha actual

        calendarVigencia.setMinSelectableDate(calendar.getTime()); // Establece la fecha mínima seleccionable como la fecha actual más un día
        // Agregar un listener para el cambio de fecha
         // Agregar un listener para el cambio de fecha
    }

    
    private void mostrarDatosTabla(){
        if(MySQLConnection.conectarBD()){
            String sql = "SELECT \n" +
            "    IK.ID_Kick AS 'ID del alumno',\n" +
            "    CONCAT(IK.Nom_Kick, ' ', IK.ApPat_Kick, ' ', IK.ApMat_Kick) AS 'Nombre completo',\n" +
            "    Last_Payments.Last_Pago AS 'Último pago'\n" +
            "FROM \n" +
            "    InscripcionKick IK\n" +
            "LEFT JOIN (\n" +
            "    SELECT ID_Kick, MAX(FecVig_PagoK) AS Last_Pago\n" +
            "    FROM PagoKick\n" +
            "    GROUP BY ID_Kick\n" +
            ") AS Last_Payments ON IK.ID_Kick = Last_Payments.ID_Kick\n" +
            "WHERE \n" +
            "    IK.Est_Kick = 'Activo'\n" +
            "    AND Last_Payments.Last_Pago < CURDATE() -- Mostrar solo pagos anteriores a la fecha actual\n" +
            "GROUP BY \n" +
            "    IK.ID_Kick, IK.Nom_Kick, IK.ApPat_Kick, IK.ApMat_Kick;";
            Statement st;
            Connection conexion = MySQLConnection.getConexion();
            DefaultTableModel model = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column){
                    return false;
                }
            };
            model.addColumn("ID del alumno");
            model.addColumn("Nombre");
            model.addColumn("Último pago");
            tablaKick.setModel(model);
            String [] datos = new String[3];
            try{
                st = conexion.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while(rs.next()){
                    datos[0] = String.valueOf(rs.getInt(1));
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    model.addRow(datos);
                }
                tablaKick.setModel(model);
            } catch (SQLException e) {
                System.out.println("Error al ejecutar la transacción de inserción.");
                e.printStackTrace();
                if (conexion != null) {
                    try {
                        conexion.rollback(); // Hacer rollback en caso de error
                        conexion.setAutoCommit(true);
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaKick = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        calendarVigencia = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        labelCantidad = new javax.swing.JLabel();
        btnRealizarCobro = new javax.swing.JButton();
        labelCarga = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbxFormaPago = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cobros Kick Boxing");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Cobros Kick Boxing");

        jLabel2.setText("Nombre");

        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltroKeyTyped(evt);
            }
        });

        tablaKick.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID del alumno", "Nombre", "Último pago"
            }
        ));
        tablaKick.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaKickMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaKick);

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png"))); // NOI18N
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jLabel3.setText("ID del alumno");

        txtID.setEnabled(false);

        jLabel4.setText("Vigencia");

        calendarVigencia.setDateFormatString("dd/MM/yyyy");
        calendarVigencia.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarVigenciaPropertyChange(evt);
            }
        });

        jLabel5.setText("Cantidad a pagar");

        labelCantidad.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        labelCantidad.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCantidad.setText("$ 0.00");

        btnRealizarCobro.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnRealizarCobro.setText("Registrar cobro");
        btnRealizarCobro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarCobroActionPerformed(evt);
            }
        });

        labelCarga.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cargando.gif"))); // NOI18N

        jLabel6.setText("Forma de pago");

        cmbxFormaPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", "Tarjeta" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(163, 163, 163)))
                        .addComponent(btnActualizar)
                        .addGap(72, 72, 72))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(calendarVigencia, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbxFormaPago, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(139, 139, 139)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(labelCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addComponent(btnRealizarCobro)
                                .addGap(34, 34, 34)))
                        .addComponent(labelCarga)
                        .addGap(40, 40, 40))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnActualizar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelCarga)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRealizarCobro)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(calendarVigencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbxFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6))
                                .addComponent(labelCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        mostrarDatosTabla();
        btnRealizarCobro.setEnabled(false);
        txtID.setText("");
        calendarVigencia.setDate(null);
        labelCantidad.setText("$ 0.00");
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void txtFiltroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyTyped
        Gym gym = new Gym();
        gym.procesoFiltro(txtFiltro, tablaKick, 1);
    }//GEN-LAST:event_txtFiltroKeyTyped

    private void actualizarDias(){
        try{
            LocalDate fechaSeleccionada = calendarVigencia.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate fechaActual = LocalDate.now();
            dias = ChronoUnit.DAYS.between(fechaActual, fechaSeleccionada);
            cantidad = dias * InscripcionKick.montoKickDiario;
            labelCantidad.setText("$ " + String.format("%.2f",cantidad));
        } catch(Exception e){
            labelCantidad.setText("$ 0.00");
        }
    }
    
    private void tablaKickMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaKickMouseClicked
        int seleccionar = tablaKick.rowAtPoint(evt.getPoint());        
        id = String.valueOf(tablaKick.getValueAt(seleccionar, 0));
        txtID.setText(id);
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_MONTH, 1); // Suma un día a la fecha actual
        calendarVigencia.setCalendar(calendar);
        actualizarDias();
        btnRealizarCobro.setEnabled(true);
    }//GEN-LAST:event_tablaKickMouseClicked

    private void calendarVigenciaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarVigenciaPropertyChange
        if(evt.getOldValue() != null){
            actualizarDias();
        }
    }//GEN-LAST:event_calendarVigenciaPropertyChange

    private int registrarCobroKick(){
        int filasAfectadas = 0;
        Connection conexion = null;
        try{
            if(MySQLConnection.conectarBD()){
                conexion = MySQLConnection.getConexion();
                conexion.setAutoCommit(false);
                int idPago = Gym.registrarPago("Pago de Kick Boxing", cmbxFormaPago, cantidad);
                String insertPagoKick = "INSERT INTO PagoKick (ID_PagoK, ID_Kick, ID_Pago, FecVig_PagoK) VALUES (DEFAULT, ?, ?, ?)";
                PreparedStatement st = conexion.prepareStatement(insertPagoKick);
                st.setInt(1, Integer.parseInt(id));
                st.setInt(2, idPago);
                java.util.Date fechaSeleccionada = calendarVigencia.getDate();
                java.sql.Date fechaSQL = new java.sql.Date(fechaSeleccionada.getTime());
                st.setDate(3, fechaSQL);
                st.executeUpdate();
                conexion.commit();
                conexion.setAutoCommit(true);
                filasAfectadas = 1;
            }
        } catch(SQLException e){
            System.out.println("Error al ejecutar la transacción de inserción.");
            e.printStackTrace();
            if (conexion != null) {
                try {
                    conexion.rollback(); // Hacer rollback en caso de error
                    conexion.setAutoCommit(true);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        }
        return filasAfectadas;
    }
    
    private void btnRealizarCobroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarCobroActionPerformed
        new Thread(){
            @Override
            public void run(){
                labelCarga.setVisible(true);
                int filasAfectadas = registrarCobroKick();
                if(filasAfectadas > 0){
                    JOptionPane.showMessageDialog(null, "Cobro realizado correctamente",
                            "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } else{
                    JOptionPane.showMessageDialog(null, "Error al registrar el cobro",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
                labelCarga.setVisible(false);
                btnActualizar.doClick();
            }
        }.start();
    }//GEN-LAST:event_btnRealizarCobroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnRealizarCobro;
    private com.toedter.calendar.JDateChooser calendarVigencia;
    private javax.swing.JComboBox<String> cmbxFormaPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCantidad;
    private javax.swing.JLabel labelCarga;
    private javax.swing.JTable tablaKick;
    private javax.swing.JTextField txtFiltro;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables
}
