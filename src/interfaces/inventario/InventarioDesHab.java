package interfaces.inventario;
import interfaces.inventario.Inventario;
import configtablas.RenderTabla;
import gym.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author jesus
 */
public class InventarioDesHab extends javax.swing.JInternalFrame {
    private JButton btnHab;
    private JButton[] botones;
    private String[] nomCols;
    private final Inventario inventario;
    /**
     * Creates new form InventarioDesHab
     */
    public InventarioDesHab() {
        initComponents();
        //mostrarTabla();
        labelCarga.setVisible(false);
        botonHab();
        inventario = new Inventario();
        inventario.mostrarDatosTabla("Est_Prod = 0", botones, nomCols, tablaInventario);
    }
    
    private void botonHab(){
        btnHab = new JButton("Habilitar");
        btnHab.setName("btnHabilitar");
        botones = new JButton[1];
        botones[0] = btnHab;
        nomCols = new String[1];
        nomCols[0] = "Habilitar";
    }
    
    /*private void mostrarTabla(){
        if(MySQLConnection.conectarBD()){
            String query = "SELECT ID_Prod, T_Prod, Nom_Prod, Pre_Prod, UE_Prod FROM Inventario WHERE Est_Prod = 0";
            Statement st;
            Connection conexion = MySQLConnection.getConexion();
            tablaInventario.setDefaultRenderer(Object.class, new RenderTabla());
            JButton btnHab = new JButton("Habilitar");
            btnHab.setName("btnHabilitar");
            DefaultTableModel model = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column){
                    return false;
                }
            };
            model.addColumn("ID");
            model.addColumn("Tipo");
            model.addColumn("Nombre");
            model.addColumn("Precio");
            model.addColumn("Unidades existentes");
            model.addColumn("Habilitar");
            
            tablaInventario.setModel(model);
            Object[] datos = new Object[6];
            try{
                st = conexion.createStatement();
                ResultSet rs = st.executeQuery(query);
                while(rs.next()){
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    datos[3] = rs.getString(4);
                    datos[4] = rs.getString(5);
                    datos[5] = btnHab;
                    model.addRow(datos);
                }
                tablaInventario.setModel(model);
                tablaInventario.setRowHeight(30);
            } catch(SQLException e){
                System.out.println("Error al ejecutar la transacción de inserción.");
                e.printStackTrace();
                if (conexion != null) {
                    try {
                        conexion.rollback(); // Hacer rollback en caso de error
                        conexion.setAutoCommit(true);
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInventario = new javax.swing.JTable();
        btnRefrescar = new javax.swing.JButton();
        labelCarga = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Productos deshabilitados");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("Productos deshabilitados");

        tablaInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Tipo de producto", "Nombre", "Precio", "Unidades Existentes", "Habilitar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInventario.getTableHeader().setReorderingAllowed(false);
        tablaInventario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInventarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInventario);

        btnRefrescar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png"))); // NOI18N
        btnRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarActionPerformed(evt);
            }
        });

        labelCarga.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cargando.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(labelCarga)
                .addGap(75, 75, 75)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRefrescar)
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCarga)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel1))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRefrescar)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarActionPerformed
        inventario.mostrarDatosTabla("Est_Prod = 0", botones, nomCols, tablaInventario);
    }//GEN-LAST:event_btnRefrescarActionPerformed

    private void tablaInventarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInventarioMouseClicked
        int seleccion = tablaInventario.rowAtPoint(evt.getPoint());
        int column = tablaInventario.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY() / tablaInventario.getRowHeight();
        if(row < tablaInventario.getRowCount() && row >= 0 && column < tablaInventario.getColumnCount() 
                && column >= 0){
            Object value = tablaInventario.getValueAt(row, column);
            if(value instanceof JButton){
                new Thread(){
                    @Override
                    public void run(){
                        labelCarga.setVisible(true);
                        ((JButton)value).doClick();
                        JButton boton = (JButton)value;
                        int id = Integer.parseInt(String.valueOf(tablaInventario.getValueAt(seleccion, 0)));
                        
                        if(boton.getName().equals("btnHabilitar")){
                            int filasAfectadas = 0;
                            if(MySQLConnection.conectarBD()){
                                try {
                                    Connection conexion = MySQLConnection.getConexion();
                                    String query = "UPDATE Inventario SET Est_Prod = 1 WHERE ID_Prod = ?";
                                    conexion.setAutoCommit(false);
                                    PreparedStatement st = conexion.prepareStatement(query);
                                    st.setInt(1, id);
                                    st.executeUpdate();
                                    conexion.commit();
                                    conexion.setAutoCommit(true);
                                    filasAfectadas = 1;
                                } catch (SQLException ex) {
                                    Logger.getLogger(InventarioDesHab.class.getName()).log(Level.SEVERE, null, ex);
                                    System.out.println(ex);
                                }
                            }
                            if(filasAfectadas > 0){
                            JOptionPane.showMessageDialog(null, "Producto habilitado", 
                                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            } else{
                                JOptionPane.showMessageDialog(null, "Error al habilitar el producto",
                                        "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        
                        labelCarga.setVisible(false);
                        btnRefrescar.doClick();
                    }
                }.start();
            }
        }
    }//GEN-LAST:event_tablaInventarioMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefrescar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCarga;
    private javax.swing.JTable tablaInventario;
    // End of variables declaration//GEN-END:variables
}
